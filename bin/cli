#! /usr/bin/env node
var path = require('path');
var fs = require('fs');
var mkdirp = require('mkdirp');
var debug = require('debug')('loopback-component-migrate');


/**
 * Command line implementation for loopback-component-migrate.
 *
 * Common usage case is:
 *
 * ./node_modules/.bin/loopback-component-migrate create|up|down
 */
var program = require('commander');

program
    .version(require(path.join(__dirname, '..', './package.json')).version)
    .option('-d, --migrations-dir <path>', 'set migrations directory. defaults to ./server/migrations')
    .option('-s, --server <path>', 'set server path. defaults to ./server/server.js');

program
    .command('create [name]')
    .description('create a new migration script')
    .action(function(name, options){

        function stringifyAndPadLeading(num) {
            var str = num + '';
            return (str.length === 1) ? '0' + str : str;
        }

        function generateFileName(name) {
            var d = new Date(),
                year = d.getFullYear() + '',
                month = stringifyAndPadLeading(d.getMonth()+1),
                day = stringifyAndPadLeading(d.getDate()),
                hours = stringifyAndPadLeading(d.getHours()),
                minutes = stringifyAndPadLeading(d.getMinutes()),
                seconds = stringifyAndPadLeading(d.getSeconds()),
                dateString = year + month + day + hours +  minutes + seconds,
                fileName = dateString + (name ? '-' + name : '') + '.js';
            return fileName;
        }

        function getMigrationsDir () {
            var dir = path.join(process.cwd(), 'server/migrations');
            debug('Using migrations directory: %s', dir);
            return dir;
        }

        function ensureDirectory (dir) {
            debug('Preparing migrations directory: %s', dir);
            mkdirp.sync(dir);
        }

        function writeFile (fileName, contents) {
            debug('Creating migration script: %s', fileName);
            var migrationsDir = getMigrationsDir();
            ensureDirectory(migrationsDir);
            var filePath = path.join(migrationsDir, fileName);
            fs.writeFileSync(filePath, contents);
        }

        // Create the migration file.
        var fileName = generateFileName(name);
        var migrationsDir = getMigrationsDir();
        console.log('Creating migration script %s in %s', fileName, migrationsDir);

        var fileContent = fs.readFileSync(path.resolve(path.join(__dirname, '../', 'migration-skeleton.js')));
        writeFile(fileName, fileContent);
    });

program
    .command('up [to]')
    .description('Run all pending migrations')
    .action(function(to, options){
        console.log('Migrating up...');
        var server = program.server || process.cwd() + '/server/server.js';
        var app = require(path.resolve(server));
        app.on('booted', function() {
            app.models['Migration'].on('complete', function(err) {
                if (err) {
                    console.error(err);
                    process.exit(1);
                }
                else {
                    console.log('Migrations done');
                    process.exit(0);
                }
            });
            app.models['Migration'].migrate('up', to, function(err) {
                if (err) {
                    console.error(err);
                    process.exit(1);
                }
            });
        });
    }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ migrate up');
    console.log('    $ migrate up 023');
    console.log();
});

program
    .command('down <to>')
    .description('Rollback to the given migration')
    .action(function(to, options){
        console.log('Rolling back to: "%s"', to);
        var server = program.server || process.cwd() + '/server/server.js';
        var app = require(path.resolve(server));
        app.on('booted', function() {
            app.models['Migration'].on('complete', function(err) {
                if (err) {
                    console.error(err);
                    process.exit(1);
                }
                else {
                    console.log('Rollback done');
                    process.exit(0);
                }
            });
            app.models['Migration'].migrate('down', to, function(err) {
                if (err) {
                    console.error(err);
                    process.exit(1);
                }
            });
        });
    }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ migrate down 001');
    console.log();
});

program.parse(process.argv);
